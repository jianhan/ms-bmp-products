// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/products/product.proto

/*
Package products is a generated protocol buffer package.

It is generated from these files:
	proto/products/product.proto

It has these top-level messages:
	UpsertProductsReq
	UpsertProductsRsp
	ProductsReq
	ProductsRsp
	Product
*/
package products

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ProductsService service

type ProductsServiceClient interface {
	UpsertProducts(ctx context.Context, in *UpsertProductsReq, opts ...client.CallOption) (*UpsertProductsRsp, error)
	Products(ctx context.Context, in *ProductsReq, opts ...client.CallOption) (*ProductsRsp, error)
}

type productsServiceClient struct {
	c           client.Client
	serviceName string
}

func NewProductsServiceClient(serviceName string, c client.Client) ProductsServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.products"
	}
	return &productsServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *productsServiceClient) UpsertProducts(ctx context.Context, in *UpsertProductsReq, opts ...client.CallOption) (*UpsertProductsRsp, error) {
	req := c.c.NewRequest(c.serviceName, "ProductsService.UpsertProducts", in)
	out := new(UpsertProductsRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsServiceClient) Products(ctx context.Context, in *ProductsReq, opts ...client.CallOption) (*ProductsRsp, error) {
	req := c.c.NewRequest(c.serviceName, "ProductsService.Products", in)
	out := new(ProductsRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductsService service

type ProductsServiceHandler interface {
	UpsertProducts(context.Context, *UpsertProductsReq, *UpsertProductsRsp) error
	Products(context.Context, *ProductsReq, *ProductsRsp) error
}

func RegisterProductsServiceHandler(s server.Server, hdlr ProductsServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&ProductsService{hdlr}, opts...))
}

type ProductsService struct {
	ProductsServiceHandler
}

func (h *ProductsService) UpsertProducts(ctx context.Context, in *UpsertProductsReq, out *UpsertProductsRsp) error {
	return h.ProductsServiceHandler.UpsertProducts(ctx, in, out)
}

func (h *ProductsService) Products(ctx context.Context, in *ProductsReq, out *ProductsRsp) error {
	return h.ProductsServiceHandler.Products(ctx, in, out)
}
