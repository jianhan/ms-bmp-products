// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/categories/category.proto

/*
Package categories is a generated protocol buffer package.

It is generated from these files:
	proto/categories/category.proto

It has these top-level messages:
	UpsertCategoriesReq
	UpsertCategoriesRsp
	Category
*/
package categories

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CategoriesService service

type CategoriesServiceClient interface {
	UpsertCategories(ctx context.Context, in *UpsertCategoriesReq, opts ...client.CallOption) (*UpsertCategoriesRsp, error)
}

type categoriesServiceClient struct {
	c           client.Client
	serviceName string
}

func NewCategoriesServiceClient(serviceName string, c client.Client) CategoriesServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.products"
	}
	return &categoriesServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *categoriesServiceClient) UpsertCategories(ctx context.Context, in *UpsertCategoriesReq, opts ...client.CallOption) (*UpsertCategoriesRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CategoriesService.UpsertCategories", in)
	out := new(UpsertCategoriesRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CategoriesService service

type CategoriesServiceHandler interface {
	UpsertCategories(context.Context, *UpsertCategoriesReq, *UpsertCategoriesRsp) error
}

func RegisterCategoriesServiceHandler(s server.Server, hdlr CategoriesServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&CategoriesService{hdlr}, opts...))
}

type CategoriesService struct {
	CategoriesServiceHandler
}

func (h *CategoriesService) UpsertCategories(ctx context.Context, in *UpsertCategoriesReq, out *UpsertCategoriesRsp) error {
	return h.CategoriesServiceHandler.UpsertCategories(ctx, in, out)
}
